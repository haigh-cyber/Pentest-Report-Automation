from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT, WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.oxml import parse_xml
from docx.oxml.ns import nsdecls
from docx.enum.table import WD_ALIGN_VERTICAL
import docx


class PenTestReport:
    def __init__(self, title, company_name, client_name,engagement_start_date ,engagement_end_date, version, vulnerabilities):
        self.title = title
        self.company_name = company_name
        self.client_name = client_name
        self.engagement_start_date = engagement_start_date
        self.engagement_end_date = engagement_end_date
        self.version = version
        self.vulnerabilities = vulnerabilities
        self.document = Document()

    def create_report(self):
        self.add_title_page()
        self.add_table_of_contents()
        self.add_confidentiality_statement()
        self.add_disclaimer()
        self.add_contact_information()
        self.add_assessment_overview()
        self.add_finding_severity_ratings()
        self.add_scope()
        self.add_executive_summary()
        self.add_testing_summary()
        self.add_vulnerability_summary_report_card()
        self.add_internal_penetration_test_findings()
        self.save_report()

    def add_title_page(self):
        section = self.document.sections[0]
        header = section.header
        header_paragraph = header.paragraphs[0]
        header_paragraph.text = ""
        
        self.document.add_paragraph('\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n', style='Normal')  # Add blank lines to lower the content
        title_paragraph = self.document.add_paragraph('Security Assessment Findings Report', style='Title')
        title_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        company_paragraph = self.document.add_paragraph()
        company_run = company_paragraph.add_run(f"{self.company_name}")
        company_run.font.size = Pt(16)
        company_run.font.bold = True
        company_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER


        self.document.add_paragraph('\n\n\n\n\n\n\n\n', style='Normal')
        client_paragraph = self.document.add_paragraph()
        client_run = client_paragraph.add_run(f"{self.client_name}")
        client_run.font.size = Pt(16)
        client_run.font.bold = True
        client_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        
        self.document.add_paragraph('\n', style='Normal')
        date_paragraph = self.document.add_paragraph(f"Date: {self.engagement_start_date}", style='Normal')
        date_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

        version_paragraph = self.document.add_paragraph(f"Version: {self.version}", style='Normal')
        version_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT


        footer = section.footer
        footer_paragraph = footer.paragraphs[0]

        line_paragraph = footer.add_paragraph()
        p = line_paragraph._element
        pPr = p.get_or_add_pPr()
        pBdr = OxmlElement('w:pBdr')
        bottom = OxmlElement('w:bottom')
        bottom.set(qn('w:val'), 'single')
        bottom.set(qn('w:sz'), '4')
        bottom.set(qn('w:space'), '1')
        bottom.set(qn('w:color'), 'auto')
        pBdr.append(bottom)
        pPr.append(pBdr)

        # Add footer content
        footer_paragraph = footer.add_paragraph()
        footer_paragraph.text = f"{self.company_name}\n{self.client_name}"
        footer_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER


    def add_table_of_contents(self):
        self.document.add_heading('Table of Contents', level=1)

        toc_paragraph = self.document.add_paragraph()
        run = toc_paragraph.add_run()
        fld_char_begin = OxmlElement('w:fldChar')
        fld_char_begin.set(qn('w:fldCharType'), 'begin')
        run._r.append(fld_char_begin)

        instr_text = OxmlElement('w:instrText')
        instr_text.set(qn('xml:space'), 'preserve')
        instr_text.text = 'TOC \\o "1-3" \\h \\z \\u'
        run._r.append(instr_text)

        fld_char_separate = OxmlElement('w:fldChar')
        fld_char_separate.set(qn('w:fldCharType'), 'separate')
        run._r.append(fld_char_separate)

        run.add_text("Right-click to update field.")

        fld_char_end = OxmlElement('w:fldChar')
        fld_char_end.set(qn('w:fldCharType'), 'end')
        run._r.append(fld_char_end)

        self.document.add_page_break()

    def add_confidentiality_statement(self):
        self.document.add_heading('Confidentiality Statement', level=1)
        self.document.add_paragraph(
            f"This document is the exclusive property of {self.company_name}. "
            f"This document contains proprietary and confidential information. Duplication, redistribution, or use in whole or in part in any form requires consent of both {self.company_name} and {self.client_name}. "
            f"{self.client_name} may share this document with auditors under non-disclosure agreements to demonstrate penetration test requirement compliance."
        )

    def add_disclaimer(self):
        self.document.add_heading('Disclaimer', level=1)
        self.document.add_paragraph(
            "A penetration test is considered a snapshot in time. The findings and recommendations reflect the information gathered during the assessment and not any changes or modifications made outside of that period. "
            f"Time-limited engagements do not allow for a full evaluation of all security controls. {self.company_name} prioritized the assessment to identify the weakest security controls an attacker would exploit. "
            "We recommend conducting similar assessments on an annual basis by internal or third-party assessors to ensure the continued success of the controls."
        )

    def add_contact_information(self):
        self.document.add_heading('Contact Information', level=1)
        table = self.document.add_table(rows=3, cols=3)
        table.style = 'Table Grid'

        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Name'
        hdr_cells[1].text = 'Title'
        hdr_cells[2].text = 'Contact Information'

        self.document.add_page_break()

    def add_assessment_overview(self):
        self.document.add_heading('Assessment Overview', level=1)
        self.document.add_paragraph(
            f"From {self.engagement_start_date} to {self.engagement_end_date}, {self.company_name} evaluated the security posture of {self.client_name}'s infrastructure compared to current industry best practices that included an internal network penetration test. "
            "All testing performed is based on the NIST SP 800-115 Technical Guide to Information Security Testing and Assessment, OWASP Testing Guide (v4), and customized testing frameworks."
        )
        self.document.add_paragraph("Phases of penetration testing activities include the following:")
        self.document.add_paragraph("1. Planning – Customer goals are gathered and rules of engagement obtained.", style='List Bullet')
        self.document.add_paragraph("2. Discovery – Perform scanning and enumeration to identify potential vulnerabilities, weak areas, and exploits.", style='List Bullet')
        self.document.add_paragraph("3. Attack – Confirm potential vulnerabilities through exploitation and perform additional discovery upon new access.", style='List Bullet')
        self.document.add_paragraph("4. Reporting – Document all found vulnerabilities and exploits, failed attempts, and company strengths and weaknesses.", style='List Bullet')
        self.document.add_page_break()

    def add_finding_severity_ratings(self):
        self.document.add_heading('Finding Severity Ratings', level=1)
        self.document.add_paragraph(
            "The following table defines levels of severity and corresponding CVSS score range that are used throughout the document to assess vulnerability and risk impact."
        )

        # Create the table with 5 rows and 3 columns
        table = self.document.add_table(rows=1, cols=3)
        table.style = 'Table Grid'
        
        # Setting column widths
        table.columns[0].width = docx.shared.Inches(1.0)  # Severity column
        table.columns[1].width = docx.shared.Inches(1.0)  # CVSS column
        table.columns[2].width = docx.shared.Inches(4.0)  # Definition column
        
        # Adding headings in the first row of the table
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Severity'
        hdr_cells[1].text = 'CVSS V3 Score Range'
        hdr_cells[2].text = 'Definition'

        # Define the severities
        severities = [
            ('Critical', '9.0-10.0', 'Exploitation is straightforward and usually results in system-level compromise. It is advised to form a plan of action and patch immediately.', '8B0000', RGBColor(255, 255, 255)),
            ('High', '7.0-8.9', 'Exploitation is more difficult but could cause elevated privileges and potentially a loss of data or downtime. It is advised to form a plan of action and patch as soon as possible.', 'FF4500', RGBColor(255, 255, 255)),
            ('Moderate', '4.0-6.9', 'Vulnerabilities exist but are not exploitable or require extra steps such as social engineering. It is advised to form a plan of action and patch after high-priority issues have been resolved.', 'FFA500', RGBColor(0, 0, 0)),
            ('Low', '0.1-3.9', 'Vulnerabilities are non-exploitable but would reduce an organization’s attack surface. It is advised to form a plan of action and patch during the next maintenance window.', '00FF00', RGBColor(0, 0, 0)),
            ('Informational', 'N/A', 'No vulnerability exists. Additional information is provided regarding items noticed during testing, strong controls, and additional documentation.', '0000FF', RGBColor(255, 255, 255))
        ]

        # Populate the table with severity data
        for severity in severities:
            row_cells = table.add_row().cells
            row_cells[0].text = severity[0]
            row_cells[1].text = severity[1]
            row_cells[2].text = severity[2]

            # Apply cell color
            color = severity[3]
            text_color = severity[4]
            shading_elm = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), color))
            row_cells[0]._element.get_or_add_tcPr().append(shading_elm)

            # Apply text color and alignment
            for i, cell in enumerate(row_cells):
                paragraphs = cell.paragraphs
                for paragraph in paragraphs:
                    for run in paragraph.runs:
                        if i == 0:
                            run.font.color.rgb = RGBColor(255, 255, 255)
                        else:
                            run.font.color.rgb = RGBColor(0, 0, 0)
                        run.font.size = Pt(12)
                        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                        cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER

        self.document.add_page_break()
    def add_scope(self):
        self.document.add_heading('Scope', level=1)
        table = self.document.add_table(rows=1, cols=2)
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Assessment'
        hdr_cells[1].text = 'Details'
        row_cells = table.add_row().cells
        row_cells[0].text = 'Internal Penetration Test'
        row_cells[1].text = '10.x.x.x/8'
        self.document.add_paragraph("Scope Exclusions", style='Heading 2')
        self.document.add_paragraph(
            "Per client request, {self.company_name} did not perform any of the following attacks during testing:\n"
            "Denial of Service (DoS)\n"
            "Phishing/Social Engineering"
        )
        self.document.add_paragraph("Client Allowances", style='Heading 2')
        self.document.add_paragraph(
            "{self.client_name} provided {self.company_name} the following allowances:\n"
            "Internal access to network via dropbox and port allowances"
        )
        self.document.add_page_break()

    def add_executive_summary(self):
        self.document.add_heading('Executive Summary', level=1)
        self.document.add_paragraph(
            f"{self.company_name} evaluated {self.client_name}'s internal security posture through penetration testing from {self.engagement_start_date} to {self.engagement_end_date}. "
            "The following sections provide a high-level overview of vulnerabilities discovered, successful and unsuccessful attempts, and strengths and weaknesses."
        )
        self.document.add_paragraph("Scoping and Time Limitations", style='Heading 2')
        self.document.add_paragraph(
            "Scoping during the engagement did not permit denial of service or social engineering across all testing components.\n"
            "Time limitations were in place for testing. Internal network penetration testing was permitted for ten business days."
        )
        self.document.add_page_break()

    def add_testing_summary(self):
        self.document.add_heading('Testing Summary', level=1)
        self.document.add_paragraph(
            "The network assessment evaluated {self.client_name}'s internal network security posture. From an internal perspective, {self.company_name} performed vulnerability scanning against all IPs provided by {self.client_name} to evaluate the overall patching health of the network. "
            "The team also performed common Active Directory based attacks such as Link-Local Multicast Name Resolution (LLMNR) Poisoning, SMB relaying, IPv6 man-in-the-middle relaying, and Kerberoasting. "
            "Beyond vulnerability scanning and Active Directory attacks, {self.company_name} evaluated other potential risks such as open file shares, default credentials on servers/devices, and sensitive information disclosure to gain a complete picture of the network’s security posture."
        )
        self.document.add_paragraph(
            "The {self.company_name} team discovered that LLMNR was enabled in the network (Finding IPT-001) which permitted the interception of user hashes via LLMNR poisoning. These hashes were taken offline and cracked via dictionary attacks which signals a weak password policy (Finding IPT-005). "
            "Utilizing the cracked passwords, the {self.company_name} team gained access to several machines within the network which indicates overly permissive user accounts."
        )
        self.document.add_paragraph(
            "With machine access and the use of older operating systems in the network (Finding IPT-009), the team was able to leverage WDigest (Finding IPT-003) to recover cleartext credentials to accounts. "
            "The team was also able to dump local account hashes on each machine accessed. The {self.company_name} team discovered that the local account hashes were being re-used across devices (Finding IPT-002) which lead to additional machine access through pass-the-hash attacks."
        )
        self.document.add_paragraph(
            "Ultimately, the {self.company_name} team was able to leverage accounts captured through WDigest and hash dumps to move laterally throughout the network until landing on a machine that had a Domain Administrator credential in cleartext via WDigest. "
            "The testing team was able to achieve domain admin rights and fully compromise the network."
        )
        self.document.add_page_break()

    def add_vulnerability_summary_report_card(self):
        self.document.add_heading('Vulnerability Summary & Report Card', level=1)
        self.document.add_paragraph("A brief summary of the identified vulnerabilities, including their severity and status.")
        table = self.document.add_table(rows=1, cols=5)
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Vulnerability ID'
        hdr_cells[1].text = 'Description'
        hdr_cells[2].text = 'Severity'
        hdr_cells[3].text = 'Status'
        hdr_cells[4].text = 'Notes'

        for vuln_id, details in self.vulnerabilities.items():
            row_cells = table.add_row().cells
            row_cells[0].text = vuln_id
            row_cells[1].text = details[0]
            row_cells[2].text = details[1]
            row_cells[3].text = 'Open'
            row_cells[4].text = 'Remediation in progress'
        self.document.add_page_break()

    def add_internal_penetration_test_findings(self):
        self.document.add_heading('Internal Penetration Test Findings', level=1)
        for finding_name, details in self.vulnerabilities.items():
            severity = details[1]
            self.document.add_heading(f'{finding_name} - {severity}', level=2)

            table = self.document.add_table(rows=8, cols=2)
            table.style = 'Table Grid'

            self.add_table_row(table, 'CWE', details[0])
            self.add_table_row(table, 'CVSS 3.1 Score', details[2])
            self.add_table_row(table, 'Description (Incl. Root Cause)', details[3])
            self.add_table_row(table, 'Security Impact', details[4])
            self.add_table_row(table, 'Affected Domain', details[5])
            self.add_table_row(table, 'Remediation', details[6])
            self.add_table_row(table, 'External References', details[7])

            # Color the CVSS Score cell based on the score
            score = float(details[2])
            color = self.get_cvss_color(score)
            shading_elm_1 = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), color))
            table.cell(1, 1)._element.get_or_add_tcPr().append(shading_elm_1)

            self.document.add_paragraph('Finding Evidence:', style='Heading 3')
            self.document.add_paragraph(details[8])
            self.document.add_page_break()

    def add_table_row(self, table, header, content):
        row = table.add_row().cells
        row[0].text = header
        row[1].text = content

    def get_cvss_color(self, score):
        if 0.0 <= score <= 0.0:
            return "D3D3D3"  # Gray
        elif 0.1 <= score <= 3.9:
            return "00FF00"  # Green
        elif 4.0 <= score <= 6.9:
            return "FFFF00"  # Yellow
        elif 7.0 <= score <= 8.9:
            return "FFA500"  # Orange
        elif 9.0 <= score <= 10.0:
            return "FF0000"  # Red

    def save_report(self):
        self.document.save('Penetration_Testing_Report_Updated.docx')

