from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT, WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.oxml import parse_xml
from docx.oxml.ns import nsdecls
from docx.enum.table import WD_ALIGN_VERTICAL
import docx
import os


class PenTestReport:
    def __init__(self, title, company_name, client_name,engagement_start_date ,engagement_end_date, version, vulnerabilities, image):
        self.title = title
        self.company_name = company_name
        self.client_name = client_name
        self.engagement_start_date = engagement_start_date
        self.engagement_end_date = engagement_end_date
        self.version = version
        self.vulnerabilities = vulnerabilities
        self.document = Document()
        self.image = image 

    def create_report(self):
        self.add_title_page()
        self.add_new_section()  
        self.add_header_with_line_to_new_section()
        self.add_table_of_contents()
        self.add_confidentiality_statement()
        self.add_disclaimer()
        self.add_contact_information()
        self.add_assessment_overview()
        self.add_finding_severity_ratings()
        self.add_scope()
        self.add_executive_summary()
        self.add_testing_summary()
        self.add_vulnerability_summary_report_card()
        self.add_internal_penetration_test_findings()
        self.save_report()

    def add_title_page(self):
        section = self.document.sections[0]
        header = section.header
        header.is_linked_to_previous = False  # Ensure the header is not linked to previous sections
        header_paragraph = header.paragraphs[0]
        header_paragraph.text = ""

        if os.path.exists(self.image):
            paragraph = self.document.add_paragraph()
            run = paragraph.add_run()
            try:
                run.add_picture(self.image, width=Inches(6.0))
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            except Exception as e:
                print(f"Error uploading image")

        
        self.document.add_paragraph('\n\n\n', style='Normal')  # Add blank lines to lower the content
        title_paragraph = self.document.add_paragraph('Security Assessment Findings Report', style='Title')
        title_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        company_paragraph = self.document.add_paragraph()
        company_run = company_paragraph.add_run(f"{self.company_name}")
        company_run.font.size = Pt(16)
        company_run.font.bold = True
        company_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER


        self.document.add_paragraph('\n\n\n\n\n\n', style='Normal')
        client_paragraph = self.document.add_paragraph()
        client_run = client_paragraph.add_run(f"{self.client_name}")
        client_run.font.size = Pt(16)
        client_run.font.bold = True
        client_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        
        self.document.add_paragraph('', style='Normal')
        date_paragraph = self.document.add_paragraph(f"Date: {self.engagement_start_date}", style='Normal')
        date_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

        version_paragraph = self.document.add_paragraph(f"Version: {self.version}", style='Normal')
        version_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT


        footer = section.footer
        footer_paragraph = footer.paragraphs[0]

        line_paragraph = footer.add_paragraph()
        p = line_paragraph._element
        pPr = p.get_or_add_pPr()
        pBdr = OxmlElement('w:pBdr')
        bottom = OxmlElement('w:bottom')
        bottom.set(qn('w:val'), 'single')
        bottom.set(qn('w:sz'), '4')
        bottom.set(qn('w:space'), '1')
        bottom.set(qn('w:color'), 'auto')
        pBdr.append(bottom)
        pPr.append(pBdr)


        footer_paragraph = footer.add_paragraph()
        footer_paragraph.text = f"{self.company_name}\n{self.client_name}"
        footer_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER


    def add_table_of_contents(self):
        self.document.add_heading('Table of Contents', level=1)

        toc_paragraph = self.document.add_paragraph()
        run = toc_paragraph.add_run()
        fld_char_begin = OxmlElement('w:fldChar')
        fld_char_begin.set(qn('w:fldCharType'), 'begin')
        run._r.append(fld_char_begin)

        instr_text = OxmlElement('w:instrText')
        instr_text.set(qn('xml:space'), 'preserve')
        instr_text.text = 'TOC \\o "1-3" \\h \\z \\u'
        run._r.append(instr_text)

        fld_char_separate = OxmlElement('w:fldChar')
        fld_char_separate.set(qn('w:fldCharType'), 'separate')
        run._r.append(fld_char_separate)

        run.add_text("Right-click to update field.")

        fld_char_end = OxmlElement('w:fldChar')
        fld_char_end.set(qn('w:fldCharType'), 'end')
        run._r.append(fld_char_end)


        self.document.add_page_break()

    def add_new_section(self):
        new_section = self.document.add_section()

    def add_header_with_line_to_new_section(self):
        new_section = self.document.sections[1]
        header = new_section.header
        header.is_linked_to_previous = False  

        if os.path.exists(self.image):
            header_paragraph = header.add_paragraph()
            run = header_paragraph.add_run()
            try:
                run.add_picture(self.image, width=Inches(1.0))
                header_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            except Exception as e:
                print(f"Error uploading image")
        
        

        line_paragraph = header.add_paragraph()
        p = line_paragraph._element
        pPr = p.get_or_add_pPr()
        pBdr = OxmlElement('w:pBdr')
        bottom = OxmlElement('w:bottom')
        bottom.set(qn('w:val'), 'single')
        bottom.set(qn('w:sz'), '4')
        bottom.set(qn('w:space'), '1')
        bottom.set(qn('w:color'), 'auto')
        pBdr.append(bottom)
        pPr.append(pBdr)


    def add_confidentiality_statement(self):
        self.document.add_heading('Confidentiality Statement', level=1)
        self.document.add_paragraph(
            f"This document is owned solely by {self.company_name}."
            f"It contains proprietary and confidential information. Any duplication, redistribution, or use, whether in whole or in part, requires the express consent of both {self.company_name} and {self.client_name}. "
            f"{self.client_name} is permitted to share this document with auditors under non-disclosure agreements to fulfill penetration test compliance requirements."
        )

    def add_disclaimer(self):
        self.document.add_heading('Disclaimer', level=1)
        self.document.add_paragraph(
            "A penetration test provides a snapshot of security at a specific moment. The findings and recommendations are based on the information collected during the assessment period and do not account for any changes or modifications made thereafter. "
            f"Due to time constraints, a comprehensive evaluation of all security controls may not be feasible. {self.company_name} focused on identifying the most vulnerable security controls that could be exploited by attackers."
            "We advise conducting similar assessments annually, either internally or through third-party assessors, to ensure the ongoing effectiveness of the security controls."
        )

    def add_contact_information(self):
        self.document.add_heading('Contact Information', level=1)
        table = self.document.add_table(rows=3, cols=3)
        table.style = 'Table Grid'

        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Name'
        hdr_cells[1].text = 'Title'
        hdr_cells[2].text = 'Contact Information'

        self.document.add_page_break()

    def add_assessment_overview(self):
        self.document.add_heading('Assessment Overview', level=1)
        self.document.add_paragraph(
            f"Between {self.engagement_start_date} and {self.engagement_end_date}, {self.company_name} conducted an evaluation of {self.client_name}'s infrastructure security posture, benchmarking it against current industry best practices, including an internal network penetration test. "
            "The testing was conducted following the NIST SP 800-115 Technical Guide to Information Security Testing and Assessment, the OWASP Testing Guide (v4), and other customized testing frameworks."
        )
        self.document.add_paragraph("The phases of the penetration testing activities are as follows:")
        self.document.add_paragraph("1. Planning – Define customer goals and establish rules of engagement.", style='List Bullet')
        self.document.add_paragraph("2. Discovery – Scan and enumerate to identify potential vulnerabilities, weak points, and exploits.", style='List Bullet')
        self.document.add_paragraph("3. Attack – Validate potential vulnerabilities through exploitation and continue discovery upon gaining access.", style='List Bullet')
        self.document.add_paragraph("4. Reporting – Document all identified vulnerabilities and exploits, failed attempts, and company strengths and weaknesses.", style='List Bullet')
        self.document.add_page_break()

    def add_finding_severity_ratings(self):
        self.document.add_heading('Finding Severity Ratings', level=1)
        self.document.add_paragraph(
            "The following table defines levels of severity and corresponding CVSS score range that are used throughout the document to assess vulnerability and risk impact."
        )

        table = self.document.add_table(rows=1, cols=3)
        table.style = 'Table Grid'
        
        table.columns[0].width = docx.shared.Inches(0.7)  # Severity column
        table.columns[1].width = docx.shared.Inches(0.7)  # CVSS column
        table.columns[2].width = docx.shared.Inches(4.0)  # Definition column
        
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Severity'
        hdr_cells[1].text = 'CVSS V3 Score Range'
        hdr_cells[2].text = 'Definition'

        severities = [
            ('Critical', '9.0-10.0', 'Exploitation is direct and typically leads to system-level compromise. Immediate action and patching are recommended.', '8B0000', RGBColor(255, 255, 255)),
            ('High', '7.0-8.9', 'Exploitation is more challenging but could result in elevated privileges and potential data loss or downtime. Prompt action and patching are advised.', 'FF4500', RGBColor(255, 255, 255)),
            ('Moderate', '4.0-6.9', 'Vulnerabilities exist but are not easily exploitable or may require additional steps like social engineering. Action and patching after resolving high-priority issues are recommended.', 'FFA500', RGBColor(0, 0, 0)),
            ('Low', '0.1-3.9', 'Vulnerabilities are not exploitable but may reduce the organization’s attack surface. Action and patching during the next maintenance window are advised.', '006400', RGBColor(0, 0, 0)),
            ('Informational', 'N/A', 'No vulnerabilities are present. Additional information is provided regarding observations during testing, strong controls, and further documentation.', '0000FF', RGBColor(255, 255, 255))
        ]

        for severity in severities:
            row_cells = table.add_row().cells
            row_cells[0].text = severity[0]
            row_cells[1].text = severity[1]
            row_cells[2].text = severity[2]

            color = severity[3]
            text_color = severity[4]
            shading_elm = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), color))
            row_cells[0]._element.get_or_add_tcPr().append(shading_elm)

            for i, cell in enumerate(row_cells):
                paragraphs = cell.paragraphs
                for paragraph in paragraphs:
                    for run in paragraph.runs:
                        if i == 0:
                            run.font.color.rgb = RGBColor(255, 255, 255)
                        else:
                            run.font.color.rgb = RGBColor(0, 0, 0)
                        run.font.size = Pt(12)
                        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                        cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER

        self.document.add_page_break()

    def add_scope(self):
        self.document.add_heading('Scope', level=1)
        table = self.document.add_table(rows=2, cols=2)
        hdr_cells = table.rows[0].cells
        table.style = 'Table Grid'

        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Assessment'
        hdr_cells[1].text = 'Details'

        self.document.add_paragraph("Scope Exclusions", style='Heading 2')
        self.document.add_paragraph(
            f"At the request of the client, {self.company_name} refrained from performing the following types of attacks during the testing:"
        )
        self.document.add_paragraph("", style='List Bullet')
        self.document.add_paragraph("", style='List Bullet')

        self.document.add_paragraph("Client Allowances", style='Heading 2')
        self.document.add_paragraph(
            f"{self.client_name} provided {self.company_name} the following allowances:"
        )
        self.document.add_paragraph("", style='List Bullet')
        self.document.add_paragraph("", style='List Bullet')

        self.document.add_page_break()

    def add_executive_summary(self):
        self.document.add_heading('Executive Summary', level=1)
        self.document.add_paragraph(
            f"{self.company_name} evaluated {self.client_name}'s internal security posture through penetration testing from {self.engagement_start_date} to {self.engagement_end_date}. "
            "The following sections provide a high-level overview of vulnerabilities discovered, successful and unsuccessful attempts, and strengths and weaknesses."
        )
        self.document.add_paragraph("Scoping and Time Limitations", style='Heading 2')
        self.document.add_paragraph(
            "Scoping during the engagement did not permit denial of service or social engineering across all testing components.\n"
            "Time limitations were in place for testing. Internal network penetration testing was permitted for ten business days."
        )
        self.document.add_page_break()

    def add_testing_summary(self):
        self.document.add_heading('Testing Summary', level=1)
        self.document.add_page_break()

    def add_vulnerability_summary_report_card(self):
        self.document.add_heading('Vulnerability Summary & Report Card', level=1)
        self.document.add_paragraph("A brief summary of the identified vulnerabilities, including their severity and status.")

        # Count vulnerabilities by severity
        severity_counts = {'Critical': 0, 'High': 0, 'Medium': 0, 'Low': 0, 'Informational': 0}
        for details in self.vulnerabilities.values():
            severity_counts[details[1]] += 1

        # Define colors for each severity
        severity_colors = {
            'Critical': '8B0000',
            'High': 'FF4500',
            'Medium': 'FFA500',
            'Low': '006400',
            'Informational': '0000FF'
        }

        # Filter out severities with 0 occurrences
        filtered_severities = {k: v for k, v in severity_counts.items() if v > 0}

        # Add summary table
        summary_table = self.document.add_table(rows=2, cols=len(filtered_severities) + 1)
        summary_table.style = 'Table Grid'

        # First row with counts
        hdr_cells = summary_table.rows[0].cells
        hdr_cells[0].text = str(sum(filtered_severities.values()))

        # Apply background color for the total cell
        total_shading_elm = parse_xml(r'<w:shd {} w:fill="D3D3D3"/>'.format(nsdecls('w')))  # Light gray background for total
        hdr_cells[0]._element.get_or_add_tcPr().append(total_shading_elm)
        hdr_cells[0].paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
        hdr_cells[0].paragraphs[0].runs[0].font.size = Pt(12)
        hdr_cells[0].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        hdr_cells[0].height = Pt(30)  # Set height for the first row

        col_index = 1
        for severity, count in filtered_severities.items():
            hdr_cells[col_index].text = str(count)
            shading_elm = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), severity_colors[severity]))
            hdr_cells[col_index]._element.get_or_add_tcPr().append(shading_elm)
            hdr_cells[col_index].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 255, 255)
            hdr_cells[col_index].paragraphs[0].runs[0].font.size = Pt(12)
            hdr_cells[col_index].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            hdr_cells[col_index].height = Pt(30)  # Set height for the first row
            col_index += 1

        self.document.add_paragraph('\n', style='Normal')

        hdr_cells = summary_table.rows[1].cells
        hdr_cells[0].text = 'Total'
        hdr_cells[0].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER  # Center the "Total" text
        col_index = 1
        for severity in filtered_severities.keys():
            hdr_cells[col_index].text = severity
            hdr_cells[col_index].paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 0, 0)
            hdr_cells[col_index].paragraphs[0].runs[0].font.size = Pt(12)
            hdr_cells[col_index].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            hdr_cells[col_index].height = Pt(15)  # Set height for the second row
            col_index += 1

        severity_order = ['Critical', 'High', 'Medium', 'Low', 'Informational']
        sorted_vulnerabilities = sorted(self.vulnerabilities.items(), key=lambda x: severity_order.index(x[1][1]))

        details_table = self.document.add_table(rows=1, cols=4)
        details_table.style = 'Table Grid'
        hdr_cells = details_table.rows[0].cells
        hdr_cells[0].text = 'Finding #'
        hdr_cells[1].text = 'Vulnerability'
        hdr_cells[2].text = 'Severity'
        hdr_cells[3].text = 'Status'

        id = 1
        for vuln_id, details in sorted_vulnerabilities:
            row_cells = details_table.add_row().cells
            row_cells[0].text = str(id)
            row_cells[1].text = vuln_id
            row_cells[2].text = details[1]
            row_cells[3].text = "Open"

            severity_color = severity_colors[details[1]]
            shading_elm = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), severity_color))
            row_cells[2]._element.get_or_add_tcPr().append(shading_elm)
            for paragraph in row_cells[2].paragraphs:
                for run in paragraph.runs:
                    run.font.color.rgb = RGBColor(255, 255, 255)
                    run.font.size = Pt(12)
                paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            id += 1

        self.document.add_page_break()




    def add_internal_penetration_test_findings(self):
        self.document.add_heading('Technical Findings Details', level=1)
        
        severity_colors = {
            'Critical': RGBColor(139, 0, 0),
            'High': RGBColor(255, 69, 0),
            'Medium': RGBColor(255, 165, 0),
            'Low': RGBColor(0, 100, 0),
            'Informational': RGBColor(0, 0, 255)
        }

        # Sort vulnerabilities by severity order
        severity_order = ['Critical', 'High', 'Medium', 'Low', 'Informational']
        sorted_vulnerabilities = sorted(self.vulnerabilities.items(), key=lambda x: severity_order.index(x[1][1]))
        
        finding_counter = 1

        for finding_name, details in sorted_vulnerabilities:
            severity = details[1]
            
            # Add the heading for the finding name
            heading_paragraph = self.document.add_paragraph()
            heading_paragraph.style = 'Heading 2'  # Set the entire paragraph as a heading
            run = heading_paragraph.add_run(f'{finding_counter}. {finding_name} - ')
            run.font.size = Pt(14)
            run.bold = True

            # Add the severity with the specified color
            severity_run = heading_paragraph.add_run(severity)
            severity_run.font.size = Pt(14)
            severity_run.font.color.rgb = RGBColor(*severity_colors[severity])
            severity_run.bold = True

            finding_counter += 1 

            
            table = self.document.add_table(rows=0, cols=2)
            table.style = 'Table Grid'

            # Add the table rows with proper headers
            self.add_table_row(table, 'CWE', '')
            self.add_table_row(table, 'CVSS 3.1 Score', details[2])
            self.add_table_row(table, 'Description', details[0])
            self.add_table_row(table, 'Security Impact', '')
            self.add_table_row(table, 'Affected Domain', '')
            self.add_table_row(table, 'Remediation', '')
            self.add_table_row(table, 'External References', '')

            # Set the background color for the first column based on severity
            for row in table.rows:
                color_hex = '{:02X}{:02X}{:02X}'.format(*severity_colors[severity])
                shading_elm = parse_xml(r'<w:shd {} w:fill="{}"/>'.format(nsdecls('w'), color_hex))
                row.cells[0]._element.get_or_add_tcPr().append(shading_elm)
                for paragraph in row.cells[0].paragraphs:
                    for run in paragraph.runs:
                        run.font.color.rgb = RGBColor(255, 255, 255)  # White text
                        run.font.size = Pt(12)
                row.cells[0].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

            
            self.document.add_paragraph('\n', style='Normal')
            paragraph = self.document.add_paragraph()
            run = paragraph.add_run('Finding Evidence:')
            run.font.size = Pt(12)
            run.font.color.rgb = RGBColor(0, 0, 0)

            self.document.add_page_break()  # Add blank page for evidence

    def add_table_row(self, table, header, content):
        row = table.add_row().cells
        row[0].text = header
        row[1].text = content
        for paragraph in row[0].paragraphs:
            for run in paragraph.runs:
                run.font.color.rgb = RGBColor(255, 255, 255)  # Ensure header text is white
                run.font.size = Pt(12)
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
        for paragraph in row[1].paragraphs:
            for run in paragraph.runs:
                run.font.color.rgb = RGBColor(0, 0, 0)  # Ensure content text is black
                run.font.size = Pt(12)
            paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT





    def get_cvss_color(self, score):
        if 0.0 <= score <= 0.0:
            return "D3D3D3"  # Gray
        elif 0.1 <= score <= 3.9:
            return "00FF00"  # Green
        elif 4.0 <= score <= 6.9:
            return "FFFF00"  # Yellow
        elif 7.0 <= score <= 8.9:
            return "FFA500"  # Orange
        elif 9.0 <= score <= 10.0:
            return "FF0000"  # Red

    def save_report(self):
        self.document.save('Report/Report.docx')

