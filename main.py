import csv
import os
from files import Files
from report import PenTestReport
from PIL import Image

# Define the directory name
DATA_DIR = 'Data'

def retrieve_csv(filename):
    with open(filename) as file:
        vuln = csv.reader(file, delimiter=',')
        vuln_dict = {}
        for index, item in enumerate(vuln):
            if index != 0:
                vuln_dict[item[1]] = item[2:]
        return vuln_dict

def retrieve_txt(filename):
    with open(filename) as file:
        content = [item.replace('\n', '').strip() for index, item in enumerate(file.readlines())]
    return content

# Create function that find and retrieves the wanted vulnerabilities from the register
def get_vuln(vuln_dict, vuln_list):
    result_dict = {}
    for i in vuln_list:
        if i in vuln_dict:
            result_dict[i] = vuln_dict[i]
    return result_dict

def main():
    os.system('clear')

    print(r"""
          
        __________                                    __   
        \______   \ ____   ____ ______   ____________/  |_ 
        |     ___// __ \ /    \\____ \ /  _ \_  __ \   __\
        |    |   \  ___/|   |  \  |_> >  <_> )  | \/|  |  
        |____|    \___  >___|  /   __/ \____/|__|   |__|  
                    \/     \/|__|                       

        """)

    files_obj = Files()

    while True:
        print("\nPlease select one of the following options:")
        print("        V - View files in the current directory")
        print("        u1 - Upload vulnerability register")
        print("        u2 - Upload vulnerabilities found")
        print("        L - Upload company logo")
        print("        G - Generate report")
        print("        X - Exit")

        choice = input("\nEnter your choice: ").strip().lower()

        if choice == 'v':
            print('')
            files_obj.files()

        elif choice == 'u1':
            files_obj.upload_vulnerability_register()
            if files_obj.vulnerabilitiy_register != "":
                try:
                    vuln_dict = retrieve_csv(files_obj.vulnerabilitiy_register)
                    print(f"\nVulnerability register {files_obj.vulnerabilitiy_register} loaded successfully.")
                except FileNotFoundError:
                    print(f"\nError: File {files_obj.vulnerabilitiy_register} not found.")
                except Exception as e:
                    print(f"\nError: {e}")

        elif choice == 'u2':
            files_obj.upload_vulnerabilities_found()
            if files_obj.vulnerabilities_found != "":
                try:
                    vuln_found = retrieve_txt(files_obj.vulnerabilities_found)
                    print(f"\nVulnerabilities found file {files_obj.vulnerabilities_found} loaded successfully.")
                except FileNotFoundError:
                    print(f"\nError: File {files_obj.vulnerabilities_found} not found.")
                except Exception as e:
                    print(f"\nError: {e}")

        elif choice == 'l':
            files_obj.upload_company_logo()

        elif choice == 'g':
            if 'vuln_dict' not in locals() or 'vuln_found' not in locals():
                print("\nError: Please upload both vulnerability register and vulnerabilities found files before generating the report.")
            else:
                report = PenTestReport(
                    company_name=input("What is your company name? "),
                    client_name=input("What is your client's name? "),
                    version=input("What is the version number? "),
                    engagement_start_date=input("What was the start date for the engagements? "),
                    engagement_end_date=input("What was the end date for the engagements? "),
                    vulnerabilities=get_vuln(vuln_dict, vuln_found),
                    image=files_obj.company_logo
                )
                report.create_report()
                print("\nYour report has been created successfully.")

        elif choice == 'x':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice. Please select a valid option.")

if __name__ == "__main__":
    main()
